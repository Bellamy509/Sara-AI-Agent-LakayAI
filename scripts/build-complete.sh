#!/bin/bash

# Script de build complet pour pr√©server tous les fichiers et la version
# Build Complete Script - Pr√©serve tous les fichiers sans modification

set -e  # Arr√™ter en cas d'erreur

echo "üöÄ D√©but du build complet du projet lakay-ai"
echo "üìã Pr√©servation de tous les fichiers et de la version actuelle"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier la version actuelle
CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
log_info "Version actuelle: $CURRENT_VERSION"

# Sauvegarder les informations importantes
log_info "Sauvegarde des informations du projet..."
ORIGINAL_FILES_COUNT=$(find . -type f ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./.next/*" | wc -l)
log_info "Nombre de fichiers avant build: $ORIGINAL_FILES_COUNT"

# Cr√©er un backup temporaire des fichiers critiques
log_info "Cr√©ation d'un backup de s√©curit√©..."
mkdir -p .backup-temp
cp package.json .backup-temp/
cp package-lock.json .backup-temp/ 2>/dev/null || true
cp pnpm-lock.yaml .backup-temp/ 2>/dev/null || true

# Nettoyer le cache pr√©c√©dent (sans supprimer les fichiers sources)
log_info "Nettoyage du cache de build pr√©c√©dent..."
rm -rf .next/cache 2>/dev/null || true

# V√©rifier les d√©pendances
log_info "V√©rification des d√©pendances..."
if [ -f "package-lock.json" ]; then
    npm ci
elif [ -f "pnpm-lock.yaml" ]; then
    pnpm install --frozen-lockfile
else
    npm install
fi

# Build du projet
log_info "Lancement du build de production..."
npm run build

# V√©rifier que le build s'est bien pass√©
if [ $? -eq 0 ]; then
    log_success "Build termin√© avec succ√®s!"
else
    log_error "Erreur lors du build"
    exit 1
fi

# V√©rifier que tous les fichiers sont toujours pr√©sents
FINAL_FILES_COUNT=$(find . -type f ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./.next/*" | wc -l)
log_info "Nombre de fichiers apr√®s build: $FINAL_FILES_COUNT"

# V√©rifier que la version n'a pas chang√©
FINAL_VERSION=$(node -e "console.log(require('./package.json').version)")
if [ "$CURRENT_VERSION" = "$FINAL_VERSION" ]; then
    log_success "Version pr√©serv√©e: $FINAL_VERSION"
else
    log_warning "La version a chang√© de $CURRENT_VERSION √† $FINAL_VERSION"
fi

# Afficher les statistiques du build
log_info "Statistiques du build:"
echo "  üìÅ R√©pertoire .next cr√©√©: $(du -sh .next 2>/dev/null | cut -f1 || echo 'N/A')"
echo "  üì¶ Taille totale du projet: $(du -sh . --exclude=node_modules --exclude=.git 2>/dev/null | cut -f1 || echo 'N/A')"

# V√©rifier les routes g√©n√©r√©es
if [ -d ".next/server/app" ]; then
    ROUTES_COUNT=$(find .next/server/app -name "*.js" | wc -l)
    log_info "Routes g√©n√©r√©es: $ROUTES_COUNT"
fi

# Nettoyer le backup temporaire
rm -rf .backup-temp

# Afficher le r√©sum√© final
echo ""
echo "üéâ BUILD COMPLET TERMIN√â AVEC SUCC√àS!"
echo "üìä R√©sum√©:"
echo "  ‚Ä¢ Version: $FINAL_VERSION (pr√©serv√©e)"
echo "  ‚Ä¢ Fichiers: $FINAL_FILES_COUNT (tous pr√©serv√©s)"
echo "  ‚Ä¢ Build output: .next/"
echo "  ‚Ä¢ Pr√™t pour le d√©ploiement Vercel"
echo ""
echo "üöÄ Commandes disponibles:"
echo "  ‚Ä¢ npm start          - Lancer en mode production"
echo "  ‚Ä¢ vercel --prod      - D√©ployer sur Vercel"
echo "  ‚Ä¢ npm run build:analyze - Analyser la taille du bundle"
echo ""

log_success "Le projet est pr√™t pour le d√©ploiement!" 